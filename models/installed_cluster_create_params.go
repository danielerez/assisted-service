// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// InstalledClusterCreateParams installed cluster create params
//
// swagger:model installed-cluster-create-params
type InstalledClusterCreateParams struct {

	// api vip domain.
	// Required: true
	APIVip *string `json:"api_vip"`

	// Unique identifier of the object.
	// Required: true
	// Format: uuid
	ID *strfmt.UUID `json:"id"`

	// Name of the OpenShift cluster.
	// Required: true
	Name *string `json:"name"`

	// Version of the OpenShift cluster.
	// Required: true
	// Enum: [4.6]
	OpenshiftVersion *string `json:"openshift_version"`
}

// Validate validates this installed cluster create params
func (m *InstalledClusterCreateParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAPIVip(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOpenshiftVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InstalledClusterCreateParams) validateAPIVip(formats strfmt.Registry) error {

	if err := validate.Required("api_vip", "body", m.APIVip); err != nil {
		return err
	}

	return nil
}

func (m *InstalledClusterCreateParams) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *InstalledClusterCreateParams) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

var installedClusterCreateParamsTypeOpenshiftVersionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["4.6"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		installedClusterCreateParamsTypeOpenshiftVersionPropEnum = append(installedClusterCreateParamsTypeOpenshiftVersionPropEnum, v)
	}
}

const (

	// InstalledClusterCreateParamsOpenshiftVersionNr46 captures enum value "4.6"
	InstalledClusterCreateParamsOpenshiftVersionNr46 string = "4.6"
)

// prop value enum
func (m *InstalledClusterCreateParams) validateOpenshiftVersionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, installedClusterCreateParamsTypeOpenshiftVersionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *InstalledClusterCreateParams) validateOpenshiftVersion(formats strfmt.Registry) error {

	if err := validate.Required("openshift_version", "body", m.OpenshiftVersion); err != nil {
		return err
	}

	// value enum
	if err := m.validateOpenshiftVersionEnum("openshift_version", "body", *m.OpenshiftVersion); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *InstalledClusterCreateParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InstalledClusterCreateParams) UnmarshalBinary(b []byte) error {
	var res InstalledClusterCreateParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
